{"version":3,"names":["CSS","container","tileGroupCss","CalciteTileGroupStyle0","TileGroup","this","items","getSlottedTiles","slotEl","assignedElements","flatten","filter","el","matches","mutationObserver","createObserver","updateTiles","selectItem","item","forEach","matchingEl","selectionMode","selected","updateSelectedItems","calciteTileGroupSelect","emit","setSlotEl","selectedItems","interactive","layout","scale","selectionAppearance","scaleWatcher","handleSelectionModeOrAppearanceChange","connectedCallback","connectInteractive","observe","childList","componentDidRender","updateHostInteraction","disconnectedCallback","disconnectInteractive","disconnect","calciteInternalTileKeyEventListener","event","composedPath","includes","preventDefault","stopPropagation","interactiveItems","disabled","detail","key","focusElementInGroup","target","calciteTileSelectHandler","render","role","h","InteractiveContainer","label","class","onSlotchange","ref"],"sources":["src/components/tile-group/resources.ts","src/components/tile-group/tile-group.scss?tag=calcite-tile-group&encapsulation=shadow","src/components/tile-group/tile-group.tsx"],"sourcesContent":["export const CSS = {\n  container: \"container\",\n};\n",":host {\n  box-sizing: border-box;\n  display: inline-block;\n\n  ::slotted(calcite-tile) {\n    margin-block-end: var(--calcite-spacing-px);\n    margin-inline-end: var(--calcite-spacing-px);\n  }\n}\n.container {\n  display: grid;\n  grid-auto-rows: minmax(auto, 1fr);\n}\n:host([scale=\"s\"]) {\n  .container {\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n  }\n}\n:host([scale=\"m\"]) {\n  .container {\n    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));\n  }\n}\n:host([scale=\"l\"]) {\n  .container {\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n  }\n}\n:host([layout=\"vertical\"]) {\n  .container {\n    display: flex;\n    flex-direction: column;\n  }\n}\n\n@include disabled();\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Listen,\n  Prop,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { Layout, Scale, SelectionAppearance, SelectionMode } from \"../interfaces\";\nimport { createObserver } from \"../../utils/observers\";\nimport { focusElementInGroup } from \"../../utils/dom\";\nimport { SelectableGroupComponent } from \"../../utils/selectableComponent\";\nimport { CSS } from \"./resources\";\n\n/**\n * @slot - A slot for adding `calcite-tile` elements.\n */\n@Component({\n  tag: \"calcite-tile-group\",\n  styleUrl: \"tile-group.scss\",\n  shadow: true,\n})\nexport class TileGroup implements InteractiveComponent, SelectableGroupComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** When `true`, interaction is prevented and the component is displayed with lower opacity. */\n  @Prop({ reflect: true }) disabled = false;\n\n  /** Accessible name for the component. */\n  @Prop() label!: string;\n\n  /**\n   * Defines the layout of the component.\n   *\n   * Use `\"horizontal\"` for rows, and `\"vertical\"` for a single column.\n   */\n  @Prop({ reflect: true }) layout: Exclude<Layout, \"grid\"> = \"horizontal\";\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  @Watch(\"scale\")\n  scaleWatcher(): void {\n    this.updateTiles();\n  }\n\n  /**\n   * Specifies the component's selected items.\n   *\n   * @readonly\n   */\n  @Prop({ mutable: true }) selectedItems: HTMLCalciteTileElement[] = [];\n\n  /**\n   * Specifies the selection appearance, where:\n   *\n   * - `\"icon\"` (displays a checkmark or dot), or\n   * - `\"border\"` (displays a border).\n   */\n  @Prop({ reflect: true }) selectionAppearance: SelectionAppearance = \"icon\";\n\n  /**\n   * Specifies the selection mode, where:\n   *\n   * - `\"multiple\"` (allows any number of selected items),\n   * - `\"single\"` (allows only one selected item),\n   * - `\"single-persist\"` (allows only one selected item and prevents de-selection),\n   * - `\"none\"` (allows no selected items).\n   */\n  @Prop({ reflect: true }) selectionMode: Extract<\n    \"multiple\" | \"none\" | \"single\" | \"single-persist\",\n    SelectionMode\n  > = \"none\";\n\n  @Watch(\"selectionMode\")\n  @Watch(\"selectionAppearance\")\n  handleSelectionModeOrAppearanceChange(): void {\n    this.updateTiles();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteTileGroupElement;\n\n  private items: HTMLCalciteTileElement[] = [];\n\n  private slotEl: HTMLSlotElement;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private getSlottedTiles = (): HTMLCalciteTileElement[] => {\n    return this.slotEl\n      ?.assignedElements({ flatten: true })\n      .filter((el) => el?.matches(\"calcite-tile\")) as HTMLCalciteTileElement[];\n  };\n\n  private mutationObserver = createObserver(\"mutation\", () => this.updateTiles());\n\n  private selectItem = (item: HTMLCalciteTileElement): void => {\n    if (!item) {\n      return;\n    }\n    this.items?.forEach((el) => {\n      const matchingEl = item === el;\n      switch (this.selectionMode) {\n        case \"multiple\":\n          if (matchingEl) {\n            el.selected = !el.selected;\n          }\n          break;\n\n        case \"single\":\n          el.selected = matchingEl && !el.selected;\n          break;\n\n        case \"single-persist\":\n          el.selected = !!matchingEl;\n          break;\n      }\n    });\n    this.updateSelectedItems();\n    this.calciteTileGroupSelect.emit();\n  };\n\n  private setSlotEl = (el: HTMLSlotElement): void => {\n    this.slotEl = el;\n  };\n\n  private updateSelectedItems = (): void => {\n    this.selectedItems = this.items?.filter((el) => el.selected);\n  };\n\n  private updateTiles = (): void => {\n    this.items = this.getSlottedTiles();\n    this.items?.forEach((el) => {\n      el.interactive = true;\n      el.layout = this.layout;\n      el.scale = this.scale;\n      el.selectionAppearance = this.selectionAppearance;\n      el.selectionMode = this.selectionMode;\n    });\n    this.updateSelectedItems();\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /** Fires when the component's selection changes. */\n  @Event({ cancelable: false }) calciteTileGroupSelect: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectInteractive(this);\n    this.mutationObserver?.observe(this.el, { childList: true });\n    this.updateTiles();\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectInteractive(this);\n    this.mutationObserver?.disconnect();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Event Listeners\n  //\n  //--------------------------------------------------------------------------\n\n  @Listen(\"calciteInternalTileKeyEvent\")\n  calciteInternalTileKeyEventListener(event: CustomEvent): void {\n    if (event.composedPath().includes(this.el)) {\n      event.preventDefault();\n      event.stopPropagation();\n      const interactiveItems = this.items?.filter((el) => !el.disabled);\n      switch (event.detail.key) {\n        case \"ArrowDown\":\n        case \"ArrowRight\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"next\");\n          break;\n        case \"ArrowUp\":\n        case \"ArrowLeft\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"previous\");\n          break;\n        case \"Home\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"first\");\n          break;\n        case \"End\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"last\");\n          break;\n      }\n    }\n  }\n\n  @Listen(\"calciteTileSelect\")\n  calciteTileSelectHandler(event: CustomEvent): void {\n    if (event.composedPath().includes(this.el)) {\n      this.selectItem(event.target as HTMLCalciteTileElement);\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n\n  render(): VNode {\n    const role =\n      this.selectionMode === \"none\" || this.selectionMode === \"multiple\" ? \"group\" : \"radiogroup\";\n    return (\n      <InteractiveContainer disabled={this.disabled}>\n        <div aria-label={this.label} class={CSS.container} role={role}>\n          <slot\n            onSlotchange={this.updateTiles}\n            // eslint-disable-next-line react/jsx-sort-props -- auto-generated by @esri/calcite-components/enforce-ref-last-prop\n            ref={this.setSlotEl}\n          />\n        </div>\n      </InteractiveContainer>\n    );\n  }\n}\n"],"mappings":";;;;;kQAAO,MAAMA,EAAM,CACjBC,UAAW,aCDb,MAAMC,EAAe,s7BACrB,MAAAC,EAAeD,E,MC+BFE,EAAS,M,wFAwEZC,KAAAC,MAAkC,GAUlCD,KAAAE,gBAAkB,IACjBF,KAAKG,QACRC,iBAAiB,CAAEC,QAAS,OAC7BC,QAAQC,GAAOA,GAAIC,QAAQ,kBAGxBR,KAAAS,iBAAmBC,EAAe,YAAY,IAAMV,KAAKW,gBAEzDX,KAAAY,WAAcC,IACpB,IAAKA,EAAM,CACT,M,CAEFb,KAAKC,OAAOa,SAASP,IACnB,MAAMQ,EAAaF,IAASN,EAC5B,OAAQP,KAAKgB,eACX,IAAK,WACH,GAAID,EAAY,CACdR,EAAGU,UAAYV,EAAGU,Q,CAEpB,MAEF,IAAK,SACHV,EAAGU,SAAWF,IAAeR,EAAGU,SAChC,MAEF,IAAK,iBACHV,EAAGU,WAAaF,EAChB,M,IAGNf,KAAKkB,sBACLlB,KAAKmB,uBAAuBC,MAAM,EAG5BpB,KAAAqB,UAAad,IACnBP,KAAKG,OAASI,CAAE,EAGVP,KAAAkB,oBAAsB,KAC5BlB,KAAKsB,cAAgBtB,KAAKC,OAAOK,QAAQC,GAAOA,EAAGU,UAAS,EAGtDjB,KAAAW,YAAc,KACpBX,KAAKC,MAAQD,KAAKE,kBAClBF,KAAKC,OAAOa,SAASP,IACnBA,EAAGgB,YAAc,KACjBhB,EAAGiB,OAASxB,KAAKwB,OACjBjB,EAAGkB,MAAQzB,KAAKyB,MAChBlB,EAAGmB,oBAAsB1B,KAAK0B,oBAC9BnB,EAAGS,cAAgBhB,KAAKgB,aAAa,IAEvChB,KAAKkB,qBAAqB,E,cA7HQ,M,iCAUuB,a,WAKnB,I,mBAY2B,G,yBAQC,O,mBAahE,M,CA9BJ,YAAAS,GACE3B,KAAKW,a,CAiCP,qCAAAiB,GACE5B,KAAKW,a,CA0FP,iBAAAkB,GACEC,EAAmB9B,MACnBA,KAAKS,kBAAkBsB,QAAQ/B,KAAKO,GAAI,CAAEyB,UAAW,OACrDhC,KAAKW,a,CAGP,kBAAAsB,GACEC,EAAsBlC,K,CAGxB,oBAAAmC,GACEC,EAAsBpC,MACtBA,KAAKS,kBAAkB4B,Y,CAUzB,mCAAAC,CAAoCC,GAClC,GAAIA,EAAMC,eAAeC,SAASzC,KAAKO,IAAK,CAC1CgC,EAAMG,iBACNH,EAAMI,kBACN,MAAMC,EAAmB5C,KAAKC,OAAOK,QAAQC,IAAQA,EAAGsC,WACxD,OAAQN,EAAMO,OAAOC,KACnB,IAAK,YACL,IAAK,aACHC,EAAoBJ,EAAkBL,EAAMO,OAAOG,OAAQ,QAC3D,MACF,IAAK,UACL,IAAK,YACHD,EAAoBJ,EAAkBL,EAAMO,OAAOG,OAAQ,YAC3D,MACF,IAAK,OACHD,EAAoBJ,EAAkBL,EAAMO,OAAOG,OAAQ,SAC3D,MACF,IAAK,MACHD,EAAoBJ,EAAkBL,EAAMO,OAAOG,OAAQ,QAC3D,M,EAMR,wBAAAC,CAAyBX,GACvB,GAAIA,EAAMC,eAAeC,SAASzC,KAAKO,IAAK,CAC1CP,KAAKY,WAAW2B,EAAMU,O,EAU1B,MAAAE,GACE,MAAMC,EACJpD,KAAKgB,gBAAkB,QAAUhB,KAAKgB,gBAAkB,WAAa,QAAU,aACjF,OACEqC,EAACC,EAAoB,CAAAP,IAAA,2CAACF,SAAU7C,KAAK6C,UACnCQ,EAAA,OAAAN,IAAA,wDAAiB/C,KAAKuD,MAAOC,MAAO7D,EAAIC,UAAWwD,KAAMA,GACvDC,EAAA,QAAAN,IAAA,2CACEU,aAAczD,KAAKW,YAEnB+C,IAAK1D,KAAKqB,a"}